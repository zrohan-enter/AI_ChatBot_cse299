import json
from difflib import get_close_matches
from typing import Dict, List, Optional

try:
    import requests
    from googlesearch import search
    from bs4 import BeautifulSoup
    WEB_SEARCH_AVAILABLE = True
except ImportError as e:
    print(f"Bot: Warning: Web search dependencies not installed ({e}). Web search disabled.")
    WEB_SEARCH_AVAILABLE = False

def load_knowledge_base(file_path: str) -> Dict:
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"questions": []}

def save_knowledge_base(file_path: str, data: Dict):
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=2)

def load_train_file(file_path: str = "Train.txt") -> List[Dict[str, str]]:
    train_data = []
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            i = 0
            while i < len(lines):
                if lines[i].startswith("Question: ") and i + 1 < len(lines) and lines[i + 1].startswith("Answer: "):
                    question = lines[i][len("Question: "):].strip()
                    answer = lines[i + 1][len("Answer: "):].strip()
                    train_data.append({"question": question, "answer": answer})
                    i += 2
                else:
                    i += 1
        return train_data
    except FileNotFoundError:
        print(f"Bot: Warning: {file_path} not found. Skipping local text file search.")
        return []
    except Exception as e:
        print(f"Bot: Error reading {file_path}: {e}")
        return []

def find_best_match(user_question: str, questions: List[str]) -> Optional[str]:
    matches = get_close_matches(user_question.lower(), [q.lower() for q in questions], n=1, cutoff=0.9)
    print(f"Debug: Matches for '{user_question}': {matches}")
    return matches[0] if matches else None

def get_answer_for_question(question: str, knowledge_base: Dict) -> Optional[tuple[str, str]]:
    for q in knowledge_base["questions"]:
        if q["question"].lower() == question.lower():
            return q["answer"], q["question"]
    return None, None

def find_answer_in_train(question: str, train_data: List[Dict[str, str]]) -> Optional[tuple[str, str]]:
    for q in train_data:
        if q["question"].lower() == question.lower():
            return q["answer"], q["question"]
    questions = [q["question"] for q in train_data]
    best_match = find_best_match(question, questions)
    if best_match:
        for q in train_data:
            if q["question"].lower() == best_match.lower():
                return q["answer"], best_match
    return None, None

def fetch_web_answer(query: str, stack_overflow: bool = False) -> Optional[str]:
    if not WEB_SEARCH_AVAILABLE:
        return None
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        search_query = f"{query} site:stackoverflow.com" if stack_overflow else query
        for url in search(search_query, num_results=3):
            try:
                response = requests.get(url, headers=headers, timeout=5)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                paragraphs = soup.find_all('p')
                text = ' '.join(p.get_text() for p in paragraphs[:3] if p.get_text())
                if text:
                    return text[:500] + "..." if len(text) > 500 else text
            except requests.RequestException:
                continue
        return None
    except Exception as e:
        print(f"Bot: Error fetching web results: {e}")
        return None

def chatbot():
    knowledge_base = load_knowledge_base('knowledge_base.json')
    train_data = load_train_file('Train.txt')
    greetings = {'hi', 'hey', 'hello', 'heyy', 'hey there', 'hi there'}
    
    while True:
        user_input = input('You: ')
        if user_input.lower() == 'quit':
            break
        if user_input.lower() == 'reset':
            knowledge_base = {"questions": []}
            save_knowledge_base('knowledge_base.json', knowledge_base)
            print("Bot: Knowledge base reset!")
            continue
        if user_input.startswith("python -u"):
            print("Bot: Looks like a command. Please ask a question!")
            continue

        # Handle greetings
        if user_input.lower() in greetings:
            print("Bot: Hello! How can I assist you today?")
            continue

        # Check Train.txt first
        if train_data:
            answer, matched_question = find_answer_in_train(user_input, train_data)
            if answer:
                print(f"Bot: {answer} (from Train.txt, matched: '{matched_question}')")
                continue

        # Check local JSON knowledge base
        answer, matched_question = get_answer_for_question(user_input, knowledge_base)
        if answer:
            print(f"Bot: {answer} (from knowledge base, matched: '{matched_question}')")
            continue
        best_match = find_best_match(user_input, [q['question'] for q in knowledge_base['questions']])
        if best_match:
            answer, matched_question = get_answer_for_question(best_match, knowledge_base)
            print(f"Bot: {answer} (from knowledge base, matched: '{matched_question}')")
            continue

        # Prompt to teach or search online
        print("Bot: I couldn't find an answer locally. Would you like to teach me the answer or search online? (teach/search)")
        choice = input("Your choice: ").lower()
        if choice == 'teach':
            teach_answer = input("Type the answer or 'quit' to skip: ")
            if teach_answer.lower() != 'quit' and teach_answer.strip():
                knowledge_base["questions"].append({"question": user_input, "answer": teach_answer})
                save_knowledge_base('knowledge_base.json', knowledge_base)
                print("Bot: Thank you! I learned a new response!")
            else:
                print("Bot: Answer skipped, no changes made.")
            continue

        # Try general web search
        if choice == 'search':
            print("Bot: Searching the web...")
            web_answer = fetch_web_answer(user_input, stack_overflow=False)
            if web_answer:
                print(f"Bot: {web_answer} (from general web)")
                save_answer = input("Bot: Should I save this answer to the knowledge base? (yes/no): ")
                if save_answer.lower() == 'yes':
                    knowledge_base["questions"].append({"question": user_input, "answer": web_answer})
                    save_knowledge_base('knowledge_base.json', knowledge_base)
                    print("Bot: Answer saved to knowledge base!")
                continue

            # Try Stack Overflow search
            print("Bot: No general web answer found. Searching Stack Overflow...")
            so_answer = fetch_web_answer(user_input, stack_overflow=True)
            if so_answer:
                print(f"Bot: {so_answer} (from Stack Overflow)")
                save_answer = input("Bot: Should I save this answer to the knowledge base? (yes/no): ")
                if save_answer.lower() == 'yes':
                    knowledge_base["questions"].append({"question": user_input, "answer": so_answer})
                    save_knowledge_base('knowledge_base.json', knowledge_base)
                    print("Bot: Answer saved to knowledge base!")
                continue

        # Prompt to teach if no answer found
        print("Bot: I couldn't find an answer online. Can you teach me?")
        similar_questions = get_close_matches(user_input, [q['question'] for q in knowledge_base['questions']], n=3, cutoff=0.4)
        if similar_questions:
            print("Bot: Did you mean one of these questions?")
            for i, q in enumerate(similar_questions, 1):
                print(f"{i}. {q}")
            choice = input("Enter the number (1-3) or 'new' to add a new question: ")
            if choice.isdigit() and 1 <= int(choice) <= len(similar_questions):
                best_match = similar_questions[int(choice) - 1]
                answer, matched_question = get_answer_for_question(best_match, knowledge_base)
                print(f"Bot: {answer} (from knowledge base, matched: '{matched_question}')")
                continue

        new_answer = input("Type the answer or 'quit' to skip: ")
        if new_answer.lower() != 'quit' and new_answer.strip():
            knowledge_base["questions"].append({"question": user_input, "answer": new_answer})
            save_knowledge_base('knowledge_base.json', knowledge_base)
            print("Bot: Thank you! I learned a new response!")
        else:
            print("Bot: Answer skipped, no changes made.")

if __name__ == "__main__":
    chatbot()